# -*- coding: utf-8 -*-
"""RENT_germany.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zdabg130pZaRlWXAaB5rHoyDNeMG8grr
"""

import pandas as pd
import numpy as np

rent=pd.read_csv('/content/immo_data.csv')

rent

rent.info()

rent.head(10)

rent.tail(10)

#
rent.shape

rent.isnull()

rent.fillna(0, inplace=True) #instead of removing nan values, i replaced with 0

rent.info()

rent.describe()

rent.head(10)

columns_to_visualize = [
    'totalRent', 'baseRent', 'livingSpace', 'yearConstructed','regio1',
    'noRooms', 'picturecount', 'pricetrend', 'condition',
    'interiorQual', 'petsAllowed', 'lift', 'typeOfFlat',
    'thermalChar', 'floor', 'numberOfFloors', 'garden',
    'heatingCosts', 'energyEfficiencyClass', 'lastRefurbish'
]

# Selecting the relevant columns for visualization
visualization_df = rent[columns_to_visualize]

import matplotlib.pyplot as plt
import seaborn as sns
sns.scatterplot(data=visualization_df, x='livingSpace', y='totalRent')
plt.title('Total Rent vs. Living Space')
plt.xlabel('Living Space (sq meters)')
plt.ylabel('Total Rent (Euro)')
plt.show()

sns.histplot(data=visualization_df, x='baseRent', bins=30, kde=True)
plt.title('Distribution of Base Rent')
plt.xlabel('Base Rent (Euro)')
plt.show()

#  average rent per condition
avg_rent_condition = visualization_df.groupby('regio1')['totalRent'].mean().reset_index()

#  DataFrame by 'totalRent' for a meaningful order in the plot
avg_rent_condition = avg_rent_condition.sort_values('totalRent', ascending=False)

# Plot bar chart
plt.figure(figsize=(15, 8))  # Increase the figure size for better visibility
sns.barplot(data=avg_rent_condition, x='regio1', y='totalRent', palette='viridis')  # Use a color palette

#  value labels on top of the bars for precise values
for index, value in enumerate(avg_rent_condition['totalRent']):
    plt.text(index, value, f'{value:.2f}', ha='center', va='bottom')

#  titles and labels with increased font sizes for better readability
plt.title('Average Total Rent by State', fontsize=20)
plt.xlabel('state', fontsize=18)
plt.ylabel('Average Total Rent (Euro)', fontsize=18)
plt.xticks(rotation=45, fontsize=14)  # Rotate x-axis labels for better fit
plt.yticks(fontsize=14)
plt.tight_layout()  # Adjust the layout to prevent clipping of tick-labels
plt.show()  # Display the plot

# average rent per condition
avg_rent_condition = visualization_df.groupby('condition')['totalRent'].mean().reset_index()

# Remove rows where 'totalRent' is 0
avg_rent_condition = avg_rent_condition[avg_rent_condition['totalRent'] > 0]

# Sort the DataFrame by 'totalRent' for a meaningful order in the plot
avg_rent_condition = avg_rent_condition.sort_values('totalRent', ascending=False)

# Plot bar chart
plt.figure(figsize=(15, 8))  # Increase the figure size for better visibility
sns.barplot(data=avg_rent_condition, x='condition', y='totalRent', palette='viridis')  # Use a color palette

#  value labels on top of the bars for precise values
for index, value in enumerate(avg_rent_condition['totalRent']):
    plt.text(index, value, f'{value:.2f}', ha='center', va='bottom')

# Set titles and labels with increased font sizes for better readability
plt.title('Average Total Rent by Condition', fontsize=20)
plt.xlabel('Condition', fontsize=18)
plt.ylabel('Average Total Rent (Euro)', fontsize=18)
plt.xticks(rotation=90, fontsize=14)  # Rotate x-axis labels for better fit
plt.yticks(fontsize=14)
plt.tight_layout()  # Adjust the layout to prevent clipping of tick-labels
plt.show()  # Display the plot

# Verify that no entries with 'totalRent' of 0 exist
print(avg_rent_condition[avg_rent_condition['totalRent'] == 0])

visualization_df

# Drop rows where 'totalRent' is 0
visualization_df = visualization_df.loc[visualization_df['condition'] != 0]

#ensure that 'heatingCosts' is in a numeric format
visualization_df['heatingCosts'] = pd.to_numeric(visualization_df['heatingCosts'], errors='coerce')

# Drop rows where 'heatingCosts' or 'regio1' is NaN
df = visualization_df.dropna(subset=['heatingCosts', 'regio1'])

# Find the entry with the highest heating costs
highest_heating_costs = df.loc[df['heatingCosts'].idxmax()]
# Find the entry with the lowest heating costs
lowest_heating_costs = df.loc[df['heatingCosts'].idxmin()]

# Print out the regions with the highest and lowest heating costs
print(f"The region with the highest heating costs is: {highest_heating_costs['regio1']} with heating costs of {highest_heating_costs['heatingCosts']}")
print(f"The region with the lowest heating costs is: {lowest_heating_costs['regio1']} with heating costs of {lowest_heating_costs['heatingCosts']}")

import matplotlib.pyplot as plt
import seaborn as sns

# Ensure 'heatingCosts' is in a numeric format and drop NaN values
visualization_df['heatingCosts'] = pd.to_numeric(visualization_df['heatingCosts'], errors='coerce')
df = visualization_df.dropna(subset=['heatingCosts', 'regio1'])

# Box plot for visualizing the distribution of heating costs per region
plt.figure(figsize=(15, 10))
sns.boxplot(x='regio1', y='heatingCosts', data=df)
plt.xticks(rotation=90)  # Rotate the x labels if there are many regions
plt.title('Distribution of Heating Costs by State')
plt.show()

# Bar chart for visualizing the average heating costs per region
avg_heating_costs = df.groupby('regio1')['heatingCosts'].mean().reset_index()
plt.figure(figsize=(15, 10))
sns.barplot(x='regio1', y='heatingCosts', data=avg_heating_costs)
plt.xticks(rotation=90)  # Rotate the x labels if there are many regions
plt.title('Average Heating Costs by State')
plt.show()

# First, ensure that 'baseRent' is in a numeric format
visualization_df['baseRent'] = pd.to_numeric(visualization_df['baseRent'], errors='coerce')
visualization_df = visualization_df.loc[visualization_df['typeOfFlat'] != 0]

# Drop rows where 'baseRent' or 'typeOfFlat' is NaN
df = visualization_df.dropna(subset=['baseRent', 'typeOfFlat'])

# Group by 'typeOfFlat' and calculate the average base rent
avg_base_rent_by_type = df.groupby('typeOfFlat')['baseRent'].mean().reset_index()

# Sort the results for better readability
avg_base_rent_by_type = avg_base_rent_by_type.sort_values('baseRent', ascending=False)

# Display the results
print(avg_base_rent_by_type)

import matplotlib.pyplot as plt
# First, ensure that 'baseRent' is in a numeric format
visualization_df.loc[:, 'baseRent'] = pd.to_numeric(visualization_df['baseRent'], errors='coerce')

# Drop rows where 'baseRent' or 'typeOfFlat' is NaN
df = visualization_df.dropna(subset=['baseRent', 'typeOfFlat'])

# Group by 'typeOfFlat' and calculate the average base rent
avg_base_rent_by_type = df.groupby('typeOfFlat')['baseRent'].mean().reset_index()

# Convert 'typeOfFlat' to string if it's not already
avg_base_rent_by_type['typeOfFlat'] = avg_base_rent_by_type['typeOfFlat'].astype(str)

# Remove the entry with type of flat '0'
avg_base_rent_by_type = avg_base_rent_by_type[avg_base_rent_by_type['typeOfFlat'] != '0']

# Sort the results for better readability
avg_base_rent_by_type = avg_base_rent_by_type.sort_values('baseRent', ascending=False)

# Plotting the results
plt.figure(figsize=(12, 8))
plt.bar(avg_base_rent_by_type['typeOfFlat'], avg_base_rent_by_type['baseRent'], color='lightblue')
plt.xlabel('Type of Flat')
plt.ylabel('Average Base Rent')
plt.title('Average Base Rent by Type of Flat')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
# First, ensure that 'baseRent' is in a numeric format
visualization_df.loc[:, 'baseRent'] = pd.to_numeric(visualization_df['baseRent'], errors='coerce')
visualization_df = visualization_df.loc[visualization_df['typeOfFlat'] != 0]

# Drop rows where 'baseRent' or 'typeOfFlat' is NaN
df = visualization_df.dropna(subset=['baseRent', 'typeOfFlat'])

# Convert 'typeOfFlat' to string if it's not already
df['typeOfFlat'] = df['typeOfFlat'].astype(str)

# Count the occurrences of each type of flat
type_of_flat_counts = df['typeOfFlat'].value_counts().reset_index()
type_of_flat_counts.columns = ['typeOfFlat', 'count']

# Identify the type of flat with the highest count (most rented)
most_rented_type = type_of_flat_counts.iloc[0]

print(f"The type of flat that is rented the most is: {most_rented_type['typeOfFlat']} with {most_rented_type['count']} rentals.")

plt.figure(figsize=(10, 6))
# Create the pie chart without percentage labels
patches, texts = plt.pie(type_of_flat_counts['count'], labels=type_of_flat_counts['typeOfFlat'], colors=['skyblue', 'orange', 'green', 'red', 'purple', 'brown'], startangle=140)
plt.title('Most Rented Types of Flats')

#percentage and create labels for the legend
percentages = 100 * type_of_flat_counts['count'] / type_of_flat_counts['count'].sum()
labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(type_of_flat_counts['typeOfFlat'], percentages)]

# legend on the plot
plt.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.))
plt.tight_layout()
plt.show()

import seaborn as sns

sns.heatmap(visualization_df[['livingSpace', 'totalRent','heatingCosts','yearConstructed']].corr(), annot=True, cmap='coolwarm')
plt.title('Heat Map of Correlation')
plt.show()